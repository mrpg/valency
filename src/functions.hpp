// Note: this file was auto-generated by a digital computer. It was not
// written by a human.

#pragma once

using namespace std;

void print(shared_ptr<instr_t>);
bool is(shared_ptr<instr_t>, shared_ptr<instr_t>);
void recursive_replace(string&, const string&, const string&);
inline void replace(string&, const string&, const string&);
inline bool all_of_type(vector<shared_ptr<instr_t>>&, var_type);
inline double getdouble(shared_ptr<instr_t>&);
inline double getdouble(shared_ptr<instr_t>&, double);
inline int64_t getint(shared_ptr<instr_t>&);
inline var_type biggest_range(vector<shared_ptr<instr_t>>&);
inline bool isnumeric(const var_type&);

instr_t* get();
instr_t* get(void*, var_type);
inline void gc_handler(shared_ptr<instr_t>);
void halt(int);
void interactive_mode();
bool emptyveccond(const vector<string>&);
bool iswaste(char);
char escape(char);
template <class Stream> void parse(Stream&, vector<vector<string>>&);
inline bool isnum(const string&);
inline bool isfloat(const string&);
inline bool checkcond(shared_ptr<instr_t>);
shared_ptr<instr_t> getinstr(const string&);
void transform(const vector<string>&, vector<shared_ptr<instr_t>>&);
void call(vector<shared_ptr<instr_t>>&);
void register_builtin();
