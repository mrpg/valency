// Note: this file was auto-generated by a digital computer. It was not
// written by a human.

#pragma once

using namespace std;

void builtin_set(vector<shared_ptr<instr_t>>&);
void print(shared_ptr<instr_t>);
void builtin_print(vector<shared_ptr<instr_t>>&);
void builtin_write(vector<shared_ptr<instr_t>>&);
void builtin_exit(vector<shared_ptr<instr_t>>&);
void builtin_gt(vector<shared_ptr<instr_t>>&);
void builtin_gte(vector<shared_ptr<instr_t>>&);
void builtin_lt(vector<shared_ptr<instr_t>>&);
void builtin_lte(vector<shared_ptr<instr_t>>&);
bool is(shared_ptr<instr_t>, shared_ptr<instr_t>);
void builtin_is(vector<shared_ptr<instr_t>>&);
void builtin_not(vector<shared_ptr<instr_t>>&);
void builtin_pow(vector<shared_ptr<instr_t>>&);
void builtin_log(vector<shared_ptr<instr_t>>&);
void builtin_sin(vector<shared_ptr<instr_t>>&);
void builtin_cos(vector<shared_ptr<instr_t>>&);
void builtin_tostring(vector<shared_ptr<instr_t>>&);
void builtin_tonum(vector<shared_ptr<instr_t>>&);
void builtin_tofloat(vector<shared_ptr<instr_t>>&);
void builtin_tofunc(vector<shared_ptr<instr_t>>&);
void recursive_replace(string&, const string&, const string&);
inline void replace(string&, const string&, const string&);
void builtin_replace(vector<shared_ptr<instr_t>>&);
void builtin_tovar(vector<shared_ptr<instr_t>>&);
void builtin_makelist(vector<shared_ptr<instr_t>>&);
void builtin_list_add(vector<shared_ptr<instr_t>>&);
void builtin_find(vector<shared_ptr<instr_t>>&);
void builtin_length(vector<shared_ptr<instr_t>>&);
void builtin_readstring(vector<shared_ptr<instr_t>>&);
void builtin_export(vector<shared_ptr<instr_t>>&);
void builtin_export_clear(vector<shared_ptr<instr_t>>&);
void builtin_type(vector<shared_ptr<instr_t>>&);
void builtin_push(vector<shared_ptr<instr_t>>&);
void builtin_or(vector<shared_ptr<instr_t>>&);
void builtin_and(vector<shared_ptr<instr_t>>&);
void builtin_delete(vector<shared_ptr<instr_t>>&);
void builtin_remove_keys(vector<shared_ptr<instr_t>>&);
inline bool all_of_type(vector<shared_ptr<instr_t>>&, var_type);
inline double getdouble(shared_ptr<instr_t>&);
inline double getdouble(shared_ptr<instr_t>&, double);
inline int64_t getint(shared_ptr<instr_t>&);
inline var_type biggest_range(vector<shared_ptr<instr_t>>&);
void builtin_mul(vector<shared_ptr<instr_t>>&);
void builtin_add(vector<shared_ptr<instr_t>>&);
void builtin_sub(vector<shared_ptr<instr_t>>&);
void builtin_div(vector<shared_ptr<instr_t>>&);
void builtin_mod(vector<shared_ptr<instr_t>>&);

instr_t* get();
instr_t* get(void*, var_type);
inline void gc_handler(shared_ptr<instr_t>);
void halt(int);
void interactive_mode();
bool emptyveccond(const vector<string>&);
bool iswaste(char);
char escape(char);
template <class Stream> void parse(Stream&, vector<vector<string>>&);
inline bool isnum(const string&);
inline bool isfloat(const string&);
inline bool checkcond(shared_ptr<instr_t>);
shared_ptr<instr_t> getinstr(const string&);
void transform(const vector<string>&, vector<shared_ptr<instr_t>>&);
void call(vector<shared_ptr<instr_t>>&);
void register_builtin();
